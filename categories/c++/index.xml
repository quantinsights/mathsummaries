<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Math Summaries</title>
    <link>https://quantophile.github.io/mathsummaries/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Math Summaries</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jan 2024 20:17:26 +0100</lastBuildDate><atom:link href="https://quantophile.github.io/mathsummaries/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>STL Algorithms</title>
      <link>https://quantophile.github.io/mathsummaries/post/2024/01/02/stl-algorithms/</link>
      <pubDate>Tue, 02 Jan 2024 20:17:26 +0100</pubDate>
      
      <guid>https://quantophile.github.io/mathsummaries/post/2024/01/02/stl-algorithms/</guid>
      <description>Heaps. A real-life heap of pebbles consists smaller stones on the top, while the bigger one is at the bottom.
Heaps in C++ are the opposite of rock-towers, the biggest element is at the top, and every element is bigger than it&amp;rsquo;s children. The C++ heap is a max-heap.
The (binary) heap data structure is an array object that we can view nearly as a complete binary tree. Each node of the tree corresponds to an element of the array.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Refresher - Part 2</title>
      <link>https://quantophile.github.io/mathsummaries/post/2023/12/19/c-refresher-part-2/</link>
      <pubDate>Tue, 19 Dec 2023 15:41:24 +0100</pubDate>
      
      <guid>https://quantophile.github.io/mathsummaries/post/2023/12/19/c-refresher-part-2/</guid>
      <description>Move Semantics. Writing the move constructor and move assignment operator. lvalue and rvalue. Every single expression has a value category: an lvalue or an rvalue. An lvalue is an expression that refers to a persistent memory location and allows us to take the address of that memory location via the address-of &amp;amp; operator. An rvalue evaluates to a result that is stored only transiently. rvalues are typically things you can&amp;rsquo;t take an address of e.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Refresher - Part 1</title>
      <link>https://quantophile.github.io/mathsummaries/post/2023/12/18/c-refresher-part-1/</link>
      <pubDate>Mon, 18 Dec 2023 13:02:33 +0100</pubDate>
      
      <guid>https://quantophile.github.io/mathsummaries/post/2023/12/18/c-refresher-part-1/</guid>
      <description>Hazards of dynamic memory allocation. Dangling pointers and multiple deallocations. A dangling pointer is a pointer variable that still contains the address to the free store memory that has already been deallocated using delete or delete[]. Dereferencing a dangling pointer makes you read from, or even worse write to memory that might already be allocated to and used by other parts of the program, resulting in all kinds of unpredictable results.</description>
    </item>
    
  </channel>
</rss>
